###################################################################
#   ORBITAL PLOTTING ROUTINE
###################################################################

import numpy as N
import astropy.units as U

import matplotlib as mpl
from matplotlib import pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif')

class OrbitPlot:

    def __init__(self, planet_object):
        self.x_points = N.zeros(planet_object.time_resolution)
        self.y_points = N.zeros(planet_object.time_resolution)
        
        self.planet_object = planet_object

    def draw(self, axis=plt.gca()):
        #Draw the dots outlining the orbit using eccentric and true anomalies.
        for i, time in enumerate(self.planet_object.times[0:self.planet_object.time_resolution]):
            E = self.planet_object.anomaly(time)['ecc']
            f = self.planet_object.anomaly(time)['true']
            cos_E = N.cos(E)
            cos_f = N.cos(f)
            sin_f = N.sin(f)
            
            self.x_points[i] = (1 - self.planet_object.e*cos_E) * cos_f
            self.y_points[i] = (1 - self.planet_object.e*cos_E) * sin_f

        #Convert the quantities plotted to units of AU.
        self.x_points = self.x_points * (self.planet_object.a / U.AU)
        self.y_points = self.y_points * (self.planet_object.a / U.AU)

        #The orbital view. Draw points, subsolar longitude line, and labels.
        orbit_points = axis.scatter(self.x_points, self.y_points, color='black', s=4)
        star_point = axis.scatter(0, 0, color='black', s=8)
        self.line, = axis.plot([0, self.x_points[0]], [0, self.y_points[0]], color='black', lw=1)

        #Axis labels.
        plt.setp(plt.getp(axis.axes, 'xticklabels'), rotation = 90, size = 12)
        plt.setp(plt.getp(axis.axes, 'yticklabels'), size = 12)
        axis.set_xlabel(r'$x$ (AU)', size=16)
        axis.set_ylabel(r'$y$ (AU)', size=16)
        axis.set_aspect('equal')
            
    def update(self, i):
        if i > 0:
            self.line.set_data([0, self.x_points[i%self.planet_object.time_resolution]], [0, self.y_points[i%self.planet_object.time_resolution]])
    
